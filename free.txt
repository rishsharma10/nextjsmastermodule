mongodb+srv://<db_username>:<db_password>@newwebcluster.k1wgrru.mongodb.net/?retryWrites=true&w=majority&appName=newwebcluster


sip
ecommerce product (start) Nextjs both





1.profile details fills All updated
2.sort newest
3.exp level entry 
4.price fixed
5.no of props    less > 5 props
6.us uk optional
7.see interview
8.create milstoness
9.price low
10.timeline
11.add projects
12.props Chatgpt




create nemonic
nemonic to private key
metamask like extension
address creation





    1. Program to find longest word in a given sentence ?
    2. How to check whether a string is palindrome or not ?
    3. Write a program to remove duplicates from an array ?
    4. Program to find Reverse of a string without using built-in method ?
    5. Find the max count of consecutive 1â€™s in an array ?
    6. Find the factorial of given number ?
    7. Given 2 arrays that are sorted [0,3,4,31] and [4,6,30]. Merge them and sort [0,3,4,4,6,30,31] ?
    8. Create a function which will accepts two arrays arr1 and arr2. The function should return true if every value in arr1 has its corresponding value squared in array2. The frequency of values must be same.
    9. Given two strings. Find if one string can be formed by rearranging the letters of other string.
    10. Write logic to get unique objects from below array ?
    I/P: [{name: "sai"},{name:"Nang"},{name: "sai"},{name:"Nang"},{name: "111111"}];
    O/P: [{name: "sai"},{name:"Nang"}{name: "111111"}]
    11. Write a JavaScript program to find the maximum number in an array.
    12. Write a JavaScript function that takes an array of numbers and returns a new array with only the even numbers.
    13. Write a JavaScript function to check if a given number is prime.
    14. Write a JavaScript program to find the largest element in a nested array.
    [[3, 4, 58], [709, 8, 9, [10, 11]], [111, 2]]
    15. Write a JavaScript function that returns the Fibonacci sequence up to a given number of terms.
    16. Given a string, write a javascript function to count the occurrences of each character in the string.
    17. Write a javascript function that sorts an array of numbers in ascending order.
    18. Write a javascript function that sorts an array of numbers in descending order.
    19. Write a javascript function that reverses the order of words in a sentence without using the built-in reverse() method.
    20. Implement a javascript function that flattens a nested array into a single-dimensional array.
    21. Write a function which converts string input into an object
    ("a.b.c", "someValue");
    {a: {b: {c: "someValue"}}}






















































































    import React, { useEffect, useState } from "react";
import { toast } from "react-toastify";

const location = () => {
  type LatLng = { lat: number; lng: number };

  /**
   * Calculates the distance between two lat/lng points in kilometers.
   */
  function getDistance(a: LatLng, b: LatLng): number {
    const R = 6371; // Radius of Earth in km
    const dLat = toRad(b.lat - a.lat);
    const dLng = toRad(b.lng - a.lng);
    const lat1 = toRad(a.lat);
    const lat2 = toRad(b.lat);

    const aVal =
      Math.sin(dLat / 2) ** 2 +
      Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLng / 2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(aVal), Math.sqrt(1 - aVal));
    return R * c;
  }

  function toRad(deg: number): number {
    return deg * (Math.PI / 180);
  }

  /**
   * Calculates bearing from one coordinate to another in degrees.
   */
  function calculateBearing(from: LatLng, to: LatLng): number {
    const lat1 = toRad(from.lat);
    const lat2 = toRad(to.lat);
    const dLng = toRad(to.lng - from.lng);

    const y = Math.sin(dLng) * Math.cos(lat2);
    const x =
      Math.cos(lat1) * Math.sin(lat2) -
      Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLng);
    const bearingRad = Math.atan2(y, x);
    return (toDeg(bearingRad) + 360) % 360;
  }

  function toDeg(rad: number): number {
    return rad * (180 / Math.PI);
  }

  /**
   * Returns the absolute difference between two bearings (0â€“180 degrees)
   */
  function getAngleDifference(a: number, b: number): number {
    const diff = Math.abs(a - b) % 360;
    return diff > 180 ? 360 - diff : diff;
  }

  /**
   * Determines if user is ahead and possibly aligned with the driver's movement
   */
  function isUserMovingTowardAmbulance(
    userPrev: LatLng,
    userNow: LatLng,
    driverPrev: LatLng,
    driverNow: LatLng,
    maxDistanceKm: number = 5,
    maxDirectionDiff: number = 60 // optional: degrees
  ): boolean {
    debugger;
    const distanceBefore = getDistance(userPrev, driverPrev);
    const distanceAfter = getDistance(userNow, driverPrev);

    const inRange = distanceAfter > distanceBefore;

    if (!inRange) return false;

    const userBearing = calculateBearing(userPrev, userNow);
    const driverBearing = calculateBearing(driverPrev, driverNow);

    const angleDiff = getAngleDifference(userBearing, driverBearing);

    return angleDiff <= maxDirectionDiff;
  }

  const userPrev = { lat: 12.9611, lng: 77.6387 };
  const userNow = { lat: 12.9625, lng: 77.6399 };
  const driverPrev = { lat: 12.95, lng: 77.63 };
  const driverNow = { lat: 12.953, lng: 77.633 };

  const shouldNotify = isUserMovingTowardAmbulance(
    userPrev,
    userNow,
    driverPrev,
    driverPrev
  );

  console.log(shouldNotify ?? "alertttt");

  const [location, setLocation] = useState<{ lat: number; lon: number } | null>(null);

  useEffect(() => {
    const interval = setInterval(() => {
      if (typeof window !== 'undefined' && 'geolocation' in navigator) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            console.log("fetchedddddd lat long")
            setLocation({
              lat: position.coords.latitude,
              lon: position.coords.longitude,
            });
          },
          (error) => {
            console.error('Geolocation error:', error);
          }
        );
      } else {
        console.warn('Geolocation not available');
      }
    }, 10000);
    return () => clearInterval(interval)
  }, []);
  console.log(location,'locationoooo')
  

  const driverCoord: any = [30.715097, 76.691345];
  const destCoord: any = [30.727796, 76.698537];
  const userCoord: any = [{
    lat:location?.lat ?? 0,
    lon:location?.lon ?? 0
  }];
  // const userCoord: any = [
  //   {
  //     lat: 30.715482,
  //     lon: 76.69196,
  //     name: "on line 1",
  //   },
  //   {
  //     lat: 30.715245,
  //     lon: 76.691791,
  //     name: "opp line 1",
  //   },
  //   {
  //     lat: 30.715642,
  //     lon: 76.692404,
  //     name: "opp line 2",
  //   },
  //   {
  //     lat: 30.715805,
  //     lon: 76.692486,
  //     name: "on line 2",
  //   },
  //   {
  //     lat: 30.720711,
  //     lon: 76.700377,
  //     name: "on line 3",
  //   },
  //   {
  //     lat: 30.720751,
  //     lon: 76.700597,
  //     name: "opp line 3",
  //   },
  //   {
  //     lat: 30.721469,
  //     lon: 76.701648,
  //     name: "on line 4",
  //   },
  //   {
  //     lat: 30.721405,
  //     lon: 76.701678,
  //     name: "opp line 4",
  //   },
  //   {
  //     lat: 30.7252,
  //     lon: 76.700582,
  //     name: "on line balongi 1",
  //   },
  //   {
  //     lat: 30.725329,
  //     lon: 76.700603,
  //     name: "opp line balongi 1",
  //   },
  //   {
  //     lat: 30.72609,
  //     lon: 76.69987,
  //     name: "on line balongi 2",
  //   },
  //   {
  //     lat: 30.726177,
  //     lon: 76.699909,
  //     name: "opp line balongi 2",
  //   },
  //   {
  //     lat: 30.727035,
  //     lon: 76.699149,
  //     name: "single line balongi pull",
  //   },
  // ];
  const initTurfApiCall = async () => {
    const payload = {
      from: {
        lat: driverCoord[0],
        lon: driverCoord[1],
      },
      to: {
        lat: destCoord[0],
        lon: destCoord[1],
      },
      users: userCoord,
    } as any;
    try {
      const apiRes = await fetch("/api/bearing", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload), // âœ… stringified payload
      });

      const data = await apiRes.json(); // âœ… parse response
      const resp = data?.users[0]
      console.log("API response:", data);
      // toast.success(JSON.stringify(data))
      if(resp?.shouldAlert){
        toast.success(`ðŸš¨ ALERT: User is inside corridor, bearing: ${resp?.bearing}, distanceInMeters:${resp?.distanceInMeters} , isInsideCorridor: ${resp?.isInsideCorridor}`);
      }else{
        toast.warning(`Error not in range, bearing: ${resp?.bearing}, distanceInMeters:${resp?.distanceInMeters} , isInsideCorridor: ${resp?.isInsideCorridor}`);
      }
    } catch (error) {}
  };

  useEffect(() => {
    initTurfApiCall()
  },[location?.lat])
  // function outer() {
  //   let count = 0;
  //   return function inner() {
  //     count++;
  //     return count;
  //   };
  // }

  // let inc = outer();
  // console.log(inc(), "incccccc");

  return (
    <>
      <div>fetch location</div>
      {/* <button onClick={() => initTurfApiCall()}>initTurfApiCall</button> */}
    </>
  );
};

export default location;
